{"version":3,"sources":["Comp1.js","Comp2.js","App.js","reportWebVitals.js","index.js"],"names":["Comp1","handler","currentCount","state","count","setState","addComment","comment","myRef","current","value","comments","push","React","createRef","onClick","this","ref","map","item","index","toString","Component","Comp2","useState","setCount","setComment","commentValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAsDeA,E,kDApDX,aAAc,IAAD,8BACT,gBAOJC,QAAU,WACN,IAAIC,EAAa,EAAKC,MAAMC,MAC5BF,IACA,EAAKG,SAAS,CACVD,MAAOF,KAZF,EAebI,WAAW,WACP,IAAIC,EAAU,EAAKC,MAAMC,QAAQC,MAC7BC,EAAW,EAAKR,MAAMI,QAC1BI,EAASC,KAAKL,GACd,EAAKF,SAAS,CACV,SAAWM,IAEf,EAAKH,MAAMC,QAAQC,MAAM,IApBzB,EAAKP,MAAM,CACPC,MAAO,EACPG,QAAS,IAEb,EAAKC,MAAMK,IAAMC,YANR,E,0CAwBb,WACI,OACI,qCACA,uCACA,8BACI,wBAAQC,QAASC,KAAKf,QAAtB,wCAEL,8BACMe,KAAKb,MAAMC,MAAQ,IAAM,EAAI,OAAS,QAE3C,8BACKY,KAAKb,MAAMC,QAEhB,8BACI,0BAAUa,IAAKD,KAAKR,UAExB,8BACI,wBAAQO,QAASC,KAAKV,WAAtB,2BAEJ,8BACI,6BACKU,KAAKb,MAAMI,QAAQW,KAAI,SAACC,EAAKC,GAAN,OAAc,6BAA4BD,GAAnBC,EAAMC,0B,GA9CrDR,IAAMS,W,eC4CXC,MA3Cf,WAAkB,IAAD,EACaC,mBAAS,GADtB,mBACNpB,EADM,KACCqB,EADD,OAEiBD,mBAAS,IAF1B,mBAENjB,EAFM,KAEGmB,EAFH,KAGTlB,EAAQK,IAAMC,YAalB,OACI,qCACI,uCACA,8BACI,wBAAQC,QAhBN,WACV,IAAIb,EAAeE,EACnBF,IACAuB,EAASvB,IAaD,wCAEL,8BACME,EAAQ,IAAM,EAAI,OAAS,QAEhC,8BACKA,IAEL,8BACI,0BAAUa,IAAKT,MAEnB,8BACI,wBAAQO,QAvBH,WACb,IAAIY,EAAenB,EAAMC,QAAQC,MAC7BC,EAAQ,sBAAOJ,GAAP,CAAgBoB,IAC5BD,EAAWf,GACXH,EAAMC,QAAQC,MAAM,IAmBZ,2BAEJ,8BACI,6BACKH,EAAQW,KAAI,SAACC,EAAKC,GAAN,OAAc,6BAA4BD,GAAnBC,EAAMC,uBCzB/CO,MAVf,WACE,OACE,qCACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,QCIWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7cb7ebb.chunk.js","sourcesContent":["import React from \"react\";\r\nclass Comp1 extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count: 0,\r\n            comment: []\r\n        }\r\n        this.myRef=React.createRef();\r\n    }\r\n    handler = ()=>{\r\n        let currentCount=this.state.count;\r\n        currentCount++;\r\n        this.setState({\r\n            count: currentCount\r\n        });\r\n    }\r\n    addComment=()=>{\r\n        let comment = this.myRef.current.value;\r\n        let comments = this.state.comment;\r\n        comments.push(comment);\r\n        this.setState({\r\n            'comments':comments\r\n        });\r\n        this.myRef.current.value='';\r\n    }\r\n    render() {\r\n        return(\r\n            <>\r\n            <h1>State</h1>\r\n            <div>\r\n                <button onClick={this.handler}>This button change state</button>\r\n            </div>    \r\n           <div>\r\n                {this.state.count % 2 === 0 ? 'even' : 'odd'}\r\n            </div>     \r\n            <div>\r\n                {this.state.count}\r\n            </div>\r\n            <div>\r\n                <textarea ref={this.myRef}></textarea>    \r\n            </div>\r\n            <div>\r\n                <button onClick={this.addComment}>Add comment</button>\r\n            </div>\r\n            <div>\r\n                <ul>\r\n                    {this.state.comment.map((item,index)=><li key={index.toString()}>{item}</li>)}\r\n                </ul>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default Comp1;","import React from \"react\";\r\nimport { useState } from \"react\";\r\nfunction Comp2() {\r\n    const [count, setCount] = useState(0);\r\n    const [comment, setComment] = useState([]);\r\n    let myRef = React.createRef();\r\n    let handler = ()=> {\r\n        let currentCount = count;\r\n        currentCount++;\r\n        setCount(currentCount);\r\n    }\r\n    let addComment = ()=> {\r\n        let commentValue = myRef.current.value;\r\n        let comments = [...comment, commentValue];\r\n        setComment(comments);\r\n        myRef.current.value='';\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1>State</h1>\r\n            <div>\r\n                <button onClick={handler}>This button change state</button>\r\n            </div>    \r\n           <div>\r\n                {count % 2 === 0 ? 'even' : 'odd'}\r\n            </div>     \r\n            <div>\r\n                {count}\r\n            </div>\r\n            <div>\r\n                <textarea ref={myRef}></textarea>    \r\n            </div>\r\n            <div>\r\n                <button onClick={addComment}>Add comment</button>\r\n            </div>\r\n            <div>\r\n                <ul>\r\n                    {comment.map((item,index)=><li key={index.toString()}>{item}</li>)}\r\n                </ul>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Comp2;","import './App.css';\nimport Comp1 from \"./Comp1\";\nimport Comp2 from './Comp2';\nfunction App() {\n  return (\n    <>\n    <Comp1 />\n    <hr />\n    <Comp2 />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}